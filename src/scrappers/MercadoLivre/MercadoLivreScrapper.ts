import puppeteer, { Browser, Page } from "puppeteer";
import { BaseScrapper } from "../../core/abstract/BaseScrapper";
import { ProductData } from "../../core/types/ProductData";
import { MercadoLivreStrategy } from "./MercadoLivreStrategy";

/**
 * Scrapper espec√≠fico para o Mercado Livre
 * Implementa a l√≥gica espec√≠fica do site
 */
export class MercadoLivreScrapper extends BaseScrapper {
  private browser: Browser | null = null;
  private page: Page | null = null;
  private strategy: MercadoLivreStrategy;
  private config: MercadoLivreConfig;

  constructor(config: MercadoLivreConfig = {}) {
    super('mercadolivre');
    this.config = {
      headless: false,
      delay: 1000, // Reduzido de 2000ms para 1000ms
      maxPages: 3, // Aumenta o padr√£o para 3 p√°ginas
      ...config
    };
    this.strategy = new MercadoLivreStrategy();
  }

  /**
   * Inicializa o browser e a p√°gina
   */
  async initialize(): Promise<void> {
    try {
      this.browser = await puppeteer.launch({
        headless: this.config?.headless ?? false,
        defaultViewport: null,
        args: ["--no-sandbox", "--disable-setuid-sandbox"],
      });

      this.page = await this.browser.newPage();

      // Configurar user agent para evitar detec√ß√£o de bot
      await this.page.setUserAgent(
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
      );

      // Inicializar a estrat√©gia
      await this.strategy.initialize(this.page);

      this.initialized = true;
      console.log("‚úÖ MercadoLivre Scrapper inicializado com sucesso");
    } catch (error) {
      console.error("‚ùå Erro ao inicializar MercadoLivre Scrapper:", error);
      throw error;
    }
  }

  /**
   * Executa busca para um termo espec√≠fico
   */
  async search(term: string): Promise<ProductData[]> {
    this.validateInitialized();

    try {
      console.log(`üîç Buscando no MercadoLivre: ${term}`);
      console.log(`‚öôÔ∏è Configura√ß√£o: maxPages=${this.config?.maxPages ?? 1}, delay=${this.config?.delay ?? 2000}ms`);
      
      // 1. Navegar para homepage e realizar busca
      console.log("üè† Navegando para p√°gina inicial...");
      await this.strategy.navigateToHomePage();
      
      console.log("üîç Realizando busca...");
      await this.strategy.performSearch(term);
      
      const allProducts: Omit<ProductData, 'source' | 'extractedAt'>[] = [];
      let currentPage = 1;

      // 2. Extrair produtos de todas as p√°ginas dispon√≠veis
      while (this.shouldContinuePagination(currentPage)) {
        console.log(`\nüìÑ === PROCESSANDO P√ÅGINA ${currentPage} ===`);
        
        // Aguarda um pouco para garantir que a p√°gina carregou completamente
        console.log("‚è≥ Aguardando carregamento da p√°gina...");
        await this.delay(500); // Reduzido de 1000ms para 500ms
        
        // Extrai produtos da p√°gina atual
        console.log("üîÑ Iniciando extra√ß√£o de produtos da p√°gina atual...");
        const products = await this.strategy.extractProducts();
        allProducts.push(...products);
        
        console.log(`üìä Total de produtos coletados at√© agora: ${allProducts.length}`);

        // Debug dos seletores ap√≥s extra√ß√£o
        console.log("üîç Executando debug dos seletores...");
        await this.strategy.debugSelectors();

        // 3. Verificar se h√° pr√≥xima p√°gina
        console.log("üîç Verificando se h√° pr√≥xima p√°gina dispon√≠vel...");
        const hasNext = await this.strategy.hasNextPage();
        
        if (hasNext && this.shouldContinuePagination(currentPage + 1)) {
          console.log(`‚û°Ô∏è Navegando para p√°gina ${currentPage + 1}...`);
          const navigationSuccess = await this.strategy.goToNextPage();
          
          if (navigationSuccess) {
            console.log(`‚è≥ Aguardando ${this.config?.delay ?? 1000}ms antes da pr√≥xima coleta...`);
            await this.delay(this.config?.delay ?? 1000);
            currentPage++;
            console.log(`‚úÖ Navega√ß√£o para p√°gina ${currentPage} conclu√≠da`);
          } else {
            console.log("‚ö†Ô∏è Falha ao navegar para pr√≥xima p√°gina, parando coleta");
            break;
          }
        } else {
          if (!hasNext) {
            console.log("üèÅ N√£o h√° mais p√°ginas dispon√≠veis, finalizando coleta");
          } else {
            console.log(`üèÅ Atingiu o limite de p√°ginas, finalizando coleta`);
          }
          break;
        }
      }

      // 4. Enriquecer dados com metadados
      console.log("üîÑ Enriquecendo dados com metadados...");
      const enrichedProducts = this.enrichProductData(allProducts);
      
      console.log(`\nüéâ === COLETA FINALIZADA ===`);
      console.log(`‚úÖ Extra√≠dos ${enrichedProducts.length} produtos do MercadoLivre para "${term}"`);
      console.log(`üìä P√°ginas processadas: ${currentPage - 1}`);
      console.log(`üìà Produtos por p√°gina m√©dia: ${enrichedProducts.length > 0 ? Math.round(enrichedProducts.length / (currentPage - 1)) : 0}`);
      
      return enrichedProducts;
    } catch (error) {
      console.error(`‚ùå Erro ao buscar "${term}" no MercadoLivre:`, error);
      throw error;
    }
  }

  /**
   * Verifica se deve continuar a pagina√ß√£o baseado na configura√ß√£o
   */
  private shouldContinuePagination(currentPage: number): boolean {
    const maxPages = this.config?.maxPages ?? 3;
    
    if (maxPages === 'allPages') {
      return true; // Sempre continua se configurado para todas as p√°ginas
    }
    
    // Se maxPages √© um n√∫mero, verifica se n√£o excedeu o limite
    if (typeof maxPages === 'number') {
      return currentPage <= maxPages;
    }
    
    // Fallback para 3 p√°ginas se n√£o especificado
    return currentPage <= 3;
  }

  /**
   * Fecha recursos do scrapper
   */
  async close(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      this.page = null;
      this.initialized = false;
      console.log("‚úÖ MercadoLivre Scrapper fechado com sucesso");
    }
  }
}

/**
 * Configura√ß√£o do scrapper do MercadoLivre
 */
export interface MercadoLivreConfig {
  headless?: boolean;
  delay?: number;
  maxPages?: number | 'allPages'; // Suporta n√∫mero espec√≠fico ou 'allPages'
} 