import { Page, ElementHandle } from "puppeteer";
import { IScrapperStrategy } from "../../core/interfaces/IScrapperStrategy";
import { ProductData } from "../../core/types/ProductData";
import { MercadoLivreSelectors } from "./MercadoLivreSelectors";

/**
 * Estrat√©gia espec√≠fica para scraping do Mercado Livre
 * Implementa a l√≥gica de extra√ß√£o espec√≠fica do site
 */
export class MercadoLivreStrategy implements IScrapperStrategy {
  private page: Page | null = null;
  private readonly baseUrl = "https://www.mercadolivre.com.br";
  private selectors: MercadoLivreSelectors;

  constructor() {
    this.selectors = new MercadoLivreSelectors();
  }

  /**
   * Inicializa a estrat√©gia com a p√°gina
   */
  async initialize(page: Page): Promise<void> {
    this.page = page;
    await this.navigateToHomePage();
  }

  /**
   * Navega para a p√°gina inicial do Mercado Livre
   */
  async navigateToHomePage(): Promise<void> {
    if (!this.page) {
      throw new Error("P√°gina n√£o inicializada");
    }

    try {
      console.log("üåê Navegando para a p√°gina inicial do Mercado Livre...");
      console.log("‚è≥ Aguardando carregamento da p√°gina (timeout: 60s)...");
      
      await this.page.goto(this.baseUrl, { 
        waitUntil: "networkidle2",
        timeout: 60000 // Aumenta timeout para 60 segundos
      });
      
      console.log("‚úÖ Navegou para a p√°gina inicial do Mercado Livre");
      console.log(`üåê URL atual: ${this.page.url()}`);
    } catch (error) {
      console.error("‚ùå Erro ao navegar para a p√°gina inicial:", error);
      console.log("üîç Tentando verificar se a p√°gina carregou parcialmente...");
      
      try {
        const currentUrl = this.page.url();
        console.log(`üåê URL atual ap√≥s erro: ${currentUrl}`);
        
        if (currentUrl.includes('mercadolivre.com.br')) {
          console.log("‚úÖ P√°gina carregou parcialmente, continuando...");
          return;
        }
      } catch (urlError) {
        console.error("‚ùå N√£o foi poss√≠vel obter URL atual:", urlError);
      }
      
      throw error;
    }
  }

  /**
   * Realiza busca por um termo espec√≠fico
   */
  async performSearch(term: string): Promise<void> {
    if (!this.page) {
      throw new Error("P√°gina n√£o inicializada");
    }

    try {
      console.log(`üîç Iniciando busca por: "${term}"`);
      
      // Aguarda o campo de busca estar dispon√≠vel
      console.log("‚è≥ Aguardando campo de busca estar dispon√≠vel...");
      const inputSearch = await this.page.waitForSelector(this.selectors.searchInput, {
        timeout: 10000,
      });

      if (!inputSearch) {
        throw new Error("Campo de busca n√£o encontrado");
      }

      console.log("üìù Preenchendo campo de busca...");
      await inputSearch.click();
      await this.page.keyboard.down('Control');
      await this.page.keyboard.press('KeyA');
      await this.page.keyboard.up('Control');
      await inputSearch.type(term);
      
      console.log("‚Üµ Pressionando Enter para realizar busca...");
      await this.page.keyboard.press("Enter");

      console.log("‚è≥ Aguardando resultados da busca carregarem...");
      await this.page.waitForNavigation({ waitUntil: "networkidle2", timeout: 15000 });

      console.log(`‚úÖ Busca realizada para: "${term}"`);
    } catch (error) {
      console.error(`‚ùå Erro ao buscar "${term}":`, error);
      throw error;
    }
  }

  /**
   * Extrai dados de produtos da p√°gina atual usando seletores nativos do Puppeteer
   */
  async extractProducts(): Promise<Omit<ProductData, 'source' | 'extractedAt'>[]> {
    if (!this.page) {
      throw new Error("P√°gina n√£o inicializada");
    }

    try {
      console.log("üîç Iniciando extra√ß√£o de produtos da p√°gina atual...");
      
      // Aguarda os resultados carregarem
      console.log("‚è≥ Aguardando container de produtos carregar...");
      const productsContainer = await this.page.waitForSelector(this.selectors.productsContainer, {
        timeout: 15000,
      });

      if(!productsContainer) {
        throw new Error("N√£o foi poss√≠vel encontrar o container de produtos");
      }

      console.log("‚úÖ Container de produtos encontrado");

      // Obt√©m todos os elementos de produtos
      console.log("üîç Buscando elementos de produtos...");
      const productElements = await productsContainer.$$(this.selectors.productItem);
      console.log(`üìä Encontrados ${productElements.length} elementos de produtos na p√°gina`);

      const productsData: Omit<ProductData, 'source' | 'extractedAt'>[] = [];

      // Processa cada produto individualmente
      console.log("üîÑ Iniciando processamento individual dos produtos...");
      for (let i = 0; i < productElements.length; i++) {
        try {
          console.log(`üì¶ Processando produto ${i + 1}/${productElements.length}...`);
          const element = productElements[i];
          if (element) {
            const product = await this.extractProductData(element);
            if (product) {
              productsData.push(product);
              console.log(`‚úÖ Produto ${i + 1} extra√≠do com sucesso: ${product.title.substring(0, 50)}...`);
            } else {
              console.log(`‚ö†Ô∏è Produto ${i + 1} n√£o p√¥de ser extra√≠do (dados insuficientes)`);
            }
          } else {
            console.log(`‚ö†Ô∏è Elemento ${i + 1} √© undefined, pulando...`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erro ao extrair produto ${i + 1}:`, error);
          // Continua processando outros produtos
        }
      }

      console.log(`‚úÖ Extra√≠dos ${productsData.length} produtos v√°lidos da p√°gina atual`);
      
      // Log adicional sobre navega√ß√£o
      console.log("üîç Verificando disponibilidade de pr√≥xima p√°gina...");
      const hasNext = await this.hasNextPage();
      if (hasNext) {
        console.log("üìÑ H√° mais p√°ginas dispon√≠veis para coleta");
      } else {
        console.log("üèÅ √öltima p√°gina alcan√ßada");
      }
      
      return productsData;
    } catch (error) {
      console.error("‚ùå Erro ao extrair dados dos produtos:", error);
      throw error;
    }
  }

  /**
   * Extrai dados de um produto individual usando seletores nativos
   */
  private async extractProductData(element: ElementHandle<any>): Promise<Omit<ProductData, 'source' | 'extractedAt'> | null> {
    try {
      // Extrai t√≠tulo
      const titleElement = await element.$(this.selectors.title);
      const title = titleElement ? await titleElement.evaluate(el => el.textContent?.trim() || "") : "";

      // Extrai pre√ßo
      const priceElement = await element.$(this.selectors.price);
      const price = priceElement ? await priceElement.evaluate(el => el.textContent?.trim() || "") : "";

      // Extrai link
      const linkElement = await element.$(this.selectors.link);
      const link = linkElement ? await linkElement.evaluate(el => {
        const anchor = el as any;
        return anchor.href || "";
      }) : "";

      // Extrai imagem
      const imageElement = await element.$(this.selectors.image);
      const image = imageElement ? await imageElement.evaluate(el => {
        const img = el as any;
        return img.src;
      }) : undefined;

      // Valida se tem os dados m√≠nimos necess√°rios
      if (title && price && link) {
        return {
          title,
          price,
          link,
          image
        };
      }

      return null;
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao extrair dados do produto:", error);
      return null;
    }
  }

  /**
   * Navega para a pr√≥xima p√°gina
   */
  async goToNextPage(): Promise<boolean> {
    if (!this.page) {
      throw new Error("P√°gina n√£o inicializada");
    }

    try {
      console.log("üîç Verificando se existe bot√£o de pr√≥xima p√°gina...");
      
      // Aguarda um pouco para garantir que a p√°gina carregou completamente
      await new Promise(resolve => setTimeout(resolve, 1000)); // Reduzido de 2000ms para 1000ms
      
      const nextPageButton = await this.page.$(this.selectors.nextPageButton);
      
      if (nextPageButton) {
        console.log("‚úÖ Bot√£o de pr√≥xima p√°gina encontrado");
        
        // Verifica se o bot√£o est√° vis√≠vel e habilitado
        const isVisible = await nextPageButton.isVisible();
        const isEnabled = await nextPageButton.evaluate(el => {
          const button = el as any;
          return !button.disabled && !button.classList.contains('disabled');
        });
        
        console.log(`üìä Status do bot√£o - Vis√≠vel: ${isVisible}, Habilitado: ${isEnabled}`);
        
        if (!isVisible || !isEnabled) {
          console.log("‚ö†Ô∏è Bot√£o de pr√≥xima p√°gina n√£o est√° dispon√≠vel para clique");
          return false;
        }
        
        console.log("‚û°Ô∏è Navegando para a pr√≥xima p√°gina...");
        
        // Aguarda o bot√£o estar clic√°vel
        await this.page.waitForSelector(this.selectors.nextPageButton, { 
          visible: true, 
          timeout: 5000 
        });
        
        // Clica no bot√£o
        await nextPageButton.click();
        
        console.log("‚è≥ Aguardando navega√ß√£o completar...");
        
        // Aguarda a navega√ß√£o completar
        await this.page.waitForNavigation({ 
          waitUntil: 'networkidle2',
          timeout: 15000 
        });
        
        console.log("‚úÖ Navegou para a pr√≥xima p√°gina com sucesso");
        
        // Aguarda um pouco mais para garantir que a nova p√°gina carregou
        await new Promise(resolve => setTimeout(resolve, 1500)); // Reduzido de 3000ms para 1500ms
        
        return true;
      } else {
        console.log("‚ÑπÔ∏è N√£o h√° bot√£o de pr√≥xima p√°gina dispon√≠vel");
        return false;
      }
    } catch (error) {
      console.error("‚ùå Erro ao navegar para pr√≥xima p√°gina:", error);
      return false;
    }
  }

  /**
   * Verifica se h√° mais p√°ginas para navegar
   */
  async hasNextPage(): Promise<boolean> {
    if (!this.page) {
      throw new Error("P√°gina n√£o inicializada");
    }

    try {
      console.log("üîç Verificando se h√° pr√≥xima p√°gina dispon√≠vel...");
      
      // Aguarda um pouco para garantir que a p√°gina carregou
      await new Promise(resolve => setTimeout(resolve, 500)); // Reduzido de 1000ms para 500ms
      
      const nextPageButton = await this.page.$(this.selectors.nextPageButton);
      
      if (nextPageButton) {
        console.log("‚úÖ Bot√£o de pr√≥xima p√°gina encontrado");
        
        // Verifica se o bot√£o est√° vis√≠vel e habilitado
        const isVisible = await nextPageButton.isVisible();
        const isEnabled = await nextPageButton.evaluate(el => {
          const button = el as any;
          return !button.disabled && !button.classList.contains('disabled');
        });
        
        const hasNext = isVisible && isEnabled;
        console.log(`üìä Status da pr√≥xima p√°gina - Vis√≠vel: ${isVisible}, Habilitado: ${isEnabled}, Dispon√≠vel: ${hasNext}`);
        return hasNext;
      }
      
      console.log("‚ÑπÔ∏è N√£o h√° bot√£o de pr√≥xima p√°gina");
      return false;
    } catch (error) {
      console.error("‚ùå Erro ao verificar pr√≥xima p√°gina:", error);
      return false;
    }
  }

  /**
   * Fun√ß√£o de debug para verificar seletores na p√°gina atual
   */
  async debugSelectors(): Promise<void> {
    if (!this.page) {
      throw new Error("P√°gina n√£o inicializada");
    }

    try {
      console.log("üîç === DEBUG SELETORES ===");
      
      // Verifica container de produtos
      const productsContainer = await this.page.$(this.selectors.productsContainer);
      console.log(`üì¶ Container de produtos encontrado: ${productsContainer ? 'SIM' : 'N√ÉO'}`);
      
      if (productsContainer) {
        const productItems = await productsContainer.$$(this.selectors.productItem);
        console.log(`üìä Elementos de produtos encontrados: ${productItems.length}`);
      }
      
      // Verifica bot√£o de pr√≥xima p√°gina
      const nextPageButton = await this.page.$(this.selectors.nextPageButton);
      console.log(`‚û°Ô∏è Bot√£o pr√≥xima p√°gina encontrado: ${nextPageButton ? 'SIM' : 'N√ÉO'}`);
      
      if (nextPageButton) {
        const isVisible = await nextPageButton.isVisible();
        const isEnabled = await nextPageButton.evaluate(el => {
          const button = el as any;
          return !button.disabled && !button.classList.contains('disabled');
        });
        console.log(`üìä Status do bot√£o - Vis√≠vel: ${isVisible}, Habilitado: ${isEnabled}`);
      }
      
      // Verifica URL atual
      const currentUrl = this.page.url();
      console.log(`üåê URL atual: ${currentUrl}`);
      
      console.log("üîç === FIM DEBUG SELETORES ===");
    } catch (error) {
      console.error("‚ùå Erro no debug de seletores:", error);
    }
  }
} 